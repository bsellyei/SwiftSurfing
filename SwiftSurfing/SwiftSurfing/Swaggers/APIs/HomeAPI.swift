//
// HomeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class HomeAPI {
    /**
     Create Home Configuration
     
     - parameter body: (body) Home Configuration object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createHomeConfiguration(body: CreateHomeConfigurationData, completion: @escaping ((_ data: HomeConfiguration?,_ error: Error?) -> Void)) {
        createHomeConfigurationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Home Configuration
     - POST /home/items/
     - 
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter body: (body) Home Configuration object that needs to be added 

     - returns: RequestBuilder<HomeConfiguration> 
     */
    open class func createHomeConfigurationWithRequestBuilder(body: CreateHomeConfigurationData) -> RequestBuilder<HomeConfiguration> {
        let path = "/home/items/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HomeConfiguration>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Find all home items for couch
     
     - parameter couchId: (path) ID of couch whose items to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAllHomeItemsForUser(couchId: String, completion: @escaping ((_ data: [HomeConfiguration]?,_ error: Error?) -> Void)) {
        findAllHomeItemsForUserWithRequestBuilder(couchId: couchId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Find all home items for couch
     - GET /home/items/{couchId}
     - 
     - examples: [{contentType=application/json, example={}}]
     
     - parameter couchId: (path) ID of couch whose items to return 

     - returns: RequestBuilder<[HomeConfiguration]> 
     */
    open class func findAllHomeItemsForUserWithRequestBuilder(couchId: String) -> RequestBuilder<[HomeConfiguration]> {
        var path = "/home/items/{couchId}"
        let couchIdPreEscape = "\(couchId)"
        let couchIdPostEscape = couchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{couchId}", with: couchIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[HomeConfiguration]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find home item by ID
     
     - parameter configurationId: (path) ID of home configuration to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findHomeItemByID(configurationId: String, completion: @escaping ((_ data: HomeConfiguration?,_ error: Error?) -> Void)) {
        findHomeItemByIDWithRequestBuilder(configurationId: configurationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Find home item by ID
     - GET /home/item/{configurationId}
     - 
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter configurationId: (path) ID of home configuration to return 

     - returns: RequestBuilder<HomeConfiguration> 
     */
    open class func findHomeItemByIDWithRequestBuilder(configurationId: String) -> RequestBuilder<HomeConfiguration> {
        var path = "/home/item/{configurationId}"
        let configurationIdPreEscape = "\(configurationId)"
        let configurationIdPostEscape = configurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationId}", with: configurationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HomeConfiguration>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all home device properties
     
     - parameter configurationType: (path) Type of configuration which properties to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllHomeDeviceProperties(configurationType: String, completion: @escaping ((_ data: [Channel]?,_ error: Error?) -> Void)) {
        getAllHomeDevicePropertiesWithRequestBuilder(configurationType: configurationType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all home device properties
     - GET /home/types/properties/{configurationType}
     - 
     - examples: [{contentType=application/json, example={}}]
     
     - parameter configurationType: (path) Type of configuration which properties to return 

     - returns: RequestBuilder<[Channel]> 
     */
    open class func getAllHomeDevicePropertiesWithRequestBuilder(configurationType: String) -> RequestBuilder<[Channel]> {
        var path = "/home/types/properties/{configurationType}"
        let configurationTypePreEscape = "\(configurationType)"
        let configurationTypePostEscape = configurationTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationType}", with: configurationTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Channel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all home device properties for device ID
     
     - parameter configurationId: (path) ID of home configuration to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllHomeDevicePropertiesForDeviceID(configurationId: String, completion: @escaping ((_ data: [APIItem]?,_ error: Error?) -> Void)) {
        getAllHomeDevicePropertiesForDeviceIDWithRequestBuilder(configurationId: configurationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all home device properties for device ID
     - GET /home/properties/{configurationId}
     - 
     - examples: [{contentType=application/json, example={}}]
     
     - parameter configurationId: (path) ID of home configuration to return 

     - returns: RequestBuilder<[APIItem]> 
     */
    open class func getAllHomeDevicePropertiesForDeviceIDWithRequestBuilder(configurationId: String) -> RequestBuilder<[APIItem]> {
        var path = "/home/properties/{configurationId}"
        let configurationIdPreEscape = "\(configurationId)"
        let configurationIdPostEscape = configurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationId}", with: configurationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[APIItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all home device types
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllHomeDeviceTypes(completion: @escaping ((_ data: [ConfigurationType]?,_ error: Error?) -> Void)) {
        getAllHomeDeviceTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all home device types
     - GET /home/types/
     - 
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[ConfigurationType]> 
     */
    open class func getAllHomeDeviceTypesWithRequestBuilder() -> RequestBuilder<[ConfigurationType]> {
        let path = "/home/types/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ConfigurationType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Switch items state
     
     - parameter itemId: (path) ID of item to switch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchItem(itemId: String, completion: @escaping ((_ data: HomeConfiguration?,_ error: Error?) -> Void)) {
        switchItemWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Switch items state
     - POST /home/switch/{itemId}
     - 
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter itemId: (path) ID of item to switch 

     - returns: RequestBuilder<HomeConfiguration> 
     */
    open class func switchItemWithRequestBuilder(itemId: String) -> RequestBuilder<HomeConfiguration> {
        var path = "/home/switch/{itemId}"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HomeConfiguration>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update device property state
     
     - parameter body: (body) Item object that needs to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDevicePropertyState(body: APIItem, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateDevicePropertyStateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update device property state
     - POST /home/properties/
     - 
     
     - parameter body: (body) Item object that needs to be updated 

     - returns: RequestBuilder<Void> 
     */
    open class func updateDevicePropertyStateWithRequestBuilder(body: APIItem) -> RequestBuilder<Void> {
        let path = "/home/properties/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
