//
// RatingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RatingAPI {
    /**
     Create new rating
     
     - parameter body: (body) Rating object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRating(body: GeneratedRating, completion: @escaping ((_ data: GeneratedRating?,_ error: Error?) -> Void)) {
        createRatingWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new rating
     - POST /ratings
     - 
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter body: (body) Rating object that needs to be added 

     - returns: RequestBuilder<Rating> 
     */
    open class func createRatingWithRequestBuilder(body: GeneratedRating) -> RequestBuilder<GeneratedRating> {
        let path = "/ratings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GeneratedRating>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete rating by ID
     
     - parameter _id: (path) Rating ID to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRating(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteRatingWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete rating by ID
     - DELETE /ratings/{Id}
     - 
     
     - parameter _id: (path) Rating ID to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRatingWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/ratings/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns ratings related to couch
     
     - parameter _id: (path) ID of couch whose ratings to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRatings(_id: String, completion: @escaping ((_ data: [GeneratedRating]?,_ error: Error?) -> Void)) {
        getRatingsWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns ratings related to couch
     - GET /ratings/{Id}
     - 
     - examples: [{contentType=application/json, example={}}]
     
     - parameter _id: (path) ID of couch whose ratings to return 

     - returns: RequestBuilder<[Rating]> 
     */
    open class func getRatingsWithRequestBuilder(_id: String) -> RequestBuilder<[GeneratedRating]> {
        var path = "/ratings/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GeneratedRating]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
