//
// ConversationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ConversationAPI {
    /**
     Add a new conversation
     
     - parameter body: (body) Conversation object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addConversation(body: APIConversation, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addConversationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a new conversation
     - POST /conversations
     - 
     
     - parameter body: (body) Conversation object that needs to be added 

     - returns: RequestBuilder<Void> 
     */
    open class func addConversationWithRequestBuilder(body: APIConversation) -> RequestBuilder<Void> {
        let path = "/conversations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Find all conversations for user
     
     - parameter userId: (path) ID of user whose conversations to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllConversationsForUser(userId: String, completion: @escaping ((_ data: [APIConversation]?,_ error: Error?) -> Void)) {
        getAllConversationsForUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Find all conversations for user
     - GET /conversations/{userId}
     - 
     - examples: [{contentType=application/json, example={}}]
     
     - parameter userId: (path) ID of user whose conversations to return 

     - returns: RequestBuilder<[APIConversation]> 
     */
    open class func getAllConversationsForUserWithRequestBuilder(userId: String) -> RequestBuilder<[APIConversation]> {
        var path = "/conversations/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[APIConversation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
