//
// ReservationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ReservationsAPI {
    /**
     Add a new reservation
     
     - parameter body: (body) Reservation object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addReservation(body: APIReservation, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addReservationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a new reservation
     - POST /reservations
     - 
     
     - parameter body: (body) Reservation object that needs to be added 

     - returns: RequestBuilder<Void> 
     */
    open class func addReservationWithRequestBuilder(body: APIReservation) -> RequestBuilder<Void> {
        let path = "/reservations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Find all reservation for couch
     
     - parameter couchId: (path) ID of couch whose reservations to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAllReservationForCouch(couchId: String, completion: @escaping ((_ data: [APIReservation]?,_ error: Error?) -> Void)) {
        findAllReservationForCouchWithRequestBuilder(couchId: couchId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Find all reservation for couch
     - GET /reservations/{couchId}
     - 
     - examples: [{contentType=application/json, example={}}]
     
     - parameter couchId: (path) ID of couch whose reservations to return 

     - returns: RequestBuilder<[APIReservation]> 
     */
    open class func findAllReservationForCouchWithRequestBuilder(couchId: String) -> RequestBuilder<[APIReservation]> {
        var path = "/reservations/{couchId}"
        let couchIdPreEscape = "\(couchId)"
        let couchIdPostEscape = couchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{couchId}", with: couchIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[APIReservation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all reservation for user
     
     - parameter userId: (path) ID of user whose reservations to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAllReservationForUser(userId: String, completion: @escaping ((_ data: [APIReservation]?,_ error: Error?) -> Void)) {
        findAllReservationForUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Find all reservation for user
     - GET /reservations/user/{userId}
     - 
     - examples: [{contentType=application/json, example={}}]
     
     - parameter userId: (path) ID of user whose reservations to return 

     - returns: RequestBuilder<[APIReservation]> 
     */
    open class func findAllReservationForUserWithRequestBuilder(userId: String) -> RequestBuilder<[APIReservation]> {
        var path = "/reservations/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[APIReservation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
