swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "SwiftSurfing"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:8081"
basePath: "/"
tags:
- name: "couch"
  description: "Couch operations"
- name: "rating"
  description: "Rating operations"
- name: "user"
  description: "User operations"
schemes:
- "https"
- "http"
paths:
  /couches:
    post:
      tags:
      - "couch"
      summary: "Add a new couch"
      description: ""
      operationId: "addCouch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Couch object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/APICouch"
      responses:
        "405":
          description: "Invalid input"
  /couches/user/{userId}:
    get:
      tags:
      - "couch"
      summary: "Find all couch for user"
      description: ""
      operationId: "findAllCouchForUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user whose couches to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APICouch"
  /couches/{cityName}/{userId}:
    get:
      tags:
      - "couch"
      summary: "Find all couch by city excluding userId's couch"
      description: ""
      operationId: "findAllCouchByCityExceptUserId"
      produces:
      - "application/json"
      parameters:
      - name: "cityName"
        in: "path"
        description: "name of a city"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        description: "userId whose couches need to be excluded"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APICouch"
  /couches/{Id}:
    get:
      tags:
      - "couch"
      summary: "Find couch by ID"
      description: "Returns a single couch"
      operationId: "getCouchById"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of couch to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/APICouch"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Couch not found"
    delete:
      tags:
      - "couch"
      summary: "Deletes a couch"
      description: ""
      operationId: "deleteCouch"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "Couch id to delete"
        required: true
        type: "string"
      responses:
        "204":
          description: "Delete succeeded"
        "404":
          description: "Couch not found"
  
  /ratings/{Id}:
    get:
      tags:
      - "rating"
      summary: "Returns ratings related to couch"
      description: ""
      operationId: "getRatings"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of couch whose ratings to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APIRating"
    delete:
      tags:
      - "rating"
      summary: "Delete rating by ID"
      description: ""
      operationId: "deleteRating"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "Rating ID to delete"
        required: true
        type: "string"
      responses:
        "204":
          description: "Delete succeeded"
        "404":
          description: "Rating not found"
  /ratings:
    post:
      tags:
      - "rating"
      summary: "Create new rating"
      description: ""
      operationId: "createRating"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Rating object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/APIRating"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/APIRating"
            
  /users:
    post:
      tags:
      - "user"
      summary: "Add a new user"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/APIUser"
      responses:
        "405":
          description: "Invalid input"
  /users/{Id}:
    get:
      tags:
      - "user"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/APIUser"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Couch not found"
          
  /conversations/{userId}:
    get:
      tags:
      - "conversation"
      summary: "Find all conversations for user"
      description: ""
      operationId: "getAllConversationsForUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user whose conversations to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APIConversation"
  /conversations:
    post:
      tags:
      - "conversation"
      summary: "Add a new conversation"
      description: ""
      operationId: "addConversation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Conversation object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/APIConversation"
      responses:
        "405":
          description: "Invalid input"
          
  /messages:
    post:
      tags:
      - "messages"
      summary: "Add a new message"
      description: ""
      operationId: "addMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Message object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/APIMessage"
      responses:
        "405":
          description: "Invalid input"
  /messages/{conversationId}:
    get:
      tags:
      - "messages"
      summary: "Find all messages in conversation"
      description: ""
      operationId: "getAllMessagesInConversation"
      produces:
      - "application/json"
      parameters:
      - name: "conversationId"
        in: "path"
        description: "ID of conversation whose messages to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APIMessage"
  
  /reservations:
    post:
      tags:
      - "reservations"
      summary: "Add a new reservation"
      description: ""
      operationId: "addReservation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Reservation object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/APIReservation"
      responses:
        "405":
          description: "Invalid input"
  /reservations/user/{userId}:
    get:
      tags:
      - "reservations"
      summary: "Find all reservation for user"
      description: ""
      operationId: "findAllReservationForUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user whose reservations to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APIReservation"
  /reservations/{couchId}:
    get:
      tags:
      - "reservations"
      summary: "Find all reservation for couch"
      description: ""
      operationId: "findAllReservationForCouch"
      produces:
      - "application/json"
      parameters:
      - name: "couchId"
        in: "path"
        description: "ID of couch whose reservations to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APIReservation"
              
  /home/items/{couchId}:
    get:
      tags:
      - "home"
      summary: "Find all home items for couch"
      description: ""
      operationId: "findAllHomeItemsForUser"
      produces:
      - "application/json"
      parameters:
      - name: "couchId"
        in: "path"
        description: "ID of couch whose items to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HomeConfiguration"
              
  /home/switch/{itemId}:
    post:
      tags:
      - "home"
      summary: "Switch items state"
      description: ""
      operationId: "switchItem"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to switch"
        required: true
        type: "string"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/HomeConfiguration"
    
  /home/types/:
    get:
      tags:
      - "home"
      summary: "Get all home device types"
      description: ""
      operationId: "getAllHomeDeviceTypes"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ConfigurationType"
              
  /home/properties/:
    get:
      tags:
      - "home"
      summary: "Get all home device properties"
      description: ""
      operationId: "getAllHomeDeviceProperties"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Channel"
              
  /home/items/:
    post:
      tags:
      - "home"
      summary: "Create Home Configuration"
      description: ""
      operationId: "createHomeConfiguration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Home Configuration object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/HomeConfiguration"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/HomeConfiguration"
      
      
      
definitions:
  ConfigurationType:
    type: "string"
    enum:
      - heating
      - cooling
      - weatherWatcher
  State:
    type: "string"
    enum:
      - on
      - off
  HomeConfiguration:
    type: "object"
    properties:
      id:
        type: "string"
      couch:
        $ref: "#/definitions/APICouch"
      name:
        type: "string"
      type:
        $ref: "#/definitions/ConfigurationType"
      itemNames:
        type: "array"
        items:
          type: "string"
      state:
        $ref: "#/definitions/State"
  Channel:
    type: "object"
    properties:
      id:
        type: "string"
      itemType:
        type: "string"
      label:
        type: "string"
  APIReservation:
    type: "object"
    properties:
      id:
        type: "string"
      user:
        $ref: "#/definitions/APIUser"
      couch:
        $ref: "#/definitions/APICouch"
      guestsNum:
        type: "integer"
        format: "int32"
      start:
        type: "string"
        format: "date"
      end:
        type: "string"
        format: "date"
  APIConversation:
    type: "object"
    properties:
      id:
        type: "string"
      users:
        type: "array"
        items:
          $ref: "#/definitions/APIUser"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/APIMessage"
  APIMessage:
    type: "object"
    properties:
      id:
        type: "string"
      user:
        $ref: "#/definitions/APIUser"
      conversation:
        $ref: "#/definitions/APIConversation"
      text:
        type: "string"
  APIRating:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      couchId:
        type: "string"
      value:
        type: "integer"
        format: "int32"
      comment:
        type: "string"
  APICouch:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      latitude:
        type: "number"
        format: "double"
      longitude:
        type: "number"
        format: "double"
      maxGuests:
        type: "integer"
        format: "int32"
      description:
        type: "string"
      imageUrls:
        type: "array"
        items:
          type: "string"
      ratingAverage:
        type: "integer"
        format: "int32"
      ratingCount:
        type: "integer"
        format: "int32"
      user:
        $ref: "#/definitions/APIUser"
  APIUser:
    type: "object"
    properties:
      id:
        type: "string"
      fullName:
        type: "string"
      email:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
